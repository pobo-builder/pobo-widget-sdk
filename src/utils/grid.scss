@import "../grid/row";
@import "../grid/col";
@import "../grid/flex";

$columns: 12;
$gutter: 30px;

$breakpoints: (
  xs: 0,
  sm: 576px,
  md: 768px,
  lg: 992px,
  xl: 1200px,
);

// Common properties for all breakpoints
%grid-column {
  position: relative;
  width: 100%;
  padding-right: $gutter / 2;
  padding-left: $gutter / 2;
}

@each $breakpoint in map-keys($breakpoints) {
  $infix: breakpoint-infix($breakpoint, $breakpoints);

  // Allow columns to stretch full width below their breakpoints
  @for $i from 1 through $columns {
    .pb-col#{$infix}-#{$i} {
      @extend %grid-column;
    }
  }
  .pb-col#{$infix},
  .pb-col#{$infix}-auto {
    @extend %grid-column;
  }

  @include media-breakpoint-up($breakpoint, $breakpoints) {
    // Provide basic `.col-{bp}` classes for equal-width flexbox columns
    .pb-col#{$infix} {
      flex-basis: 0;
      flex-grow: 1;
      max-width: 100%;
    }
    .pb-col#{$infix}-auto {
      flex: 0 0 auto;
      width: auto;
      max-width: 100%; // Reset earlier grid tiers
    }

    @for $i from 1 through $columns {
      .pb-col#{$infix}-#{$i} {
        @include make-col($i, $columns);
      }
    }

    .pb-order#{$infix}-first {
      order: -1;
    }

    .pb-order#{$infix}-last {
      order: $columns + 1;
    }

    @for $i from 0 through $columns {
      .pb-order#{$infix}-#{$i} {
        order: $i;
      }
    }

    // `$columns - 1` because offsetting by the width of an entire row isn't possible
    @for $i from 0 through ($columns - 1) {
      @if not($infix == "" and $i == 0) {
        // Avoid emitting useless .offset-0
        .pb-offset#{$infix}-#{$i} {
          @include make-col-offset($i, $columns);
        }
      }
    }
  }
}
